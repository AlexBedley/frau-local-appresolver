#! /usr/bin/env node

var chalk = require('chalk'),
	path = require('path'),
	argv = require('yargs');

argv = argv.usage('Usage: localappresolver --appclass|-c [--configfile|-f] [--hostname|-h] [--port|-p] [--dist|-d]')
	.example('localappresolver -c urn:d2l:fra:class:some-app -f appconfig.json -h acme.com -p 3000 -d dist')
	.alias('c', 'appclass')
	.alias('f', 'configfile')
	.alias('h', 'hostname')
	.alias('p', 'port')
	.alias('d', 'dist')
	.argv;

var appResolver = require('../lib/appresolver');

var fileOpts;
try {
	fileOpts = require(path.join(process.cwd(), 'appresolver.json'));
} catch (err) {
	fileOpts = {};
}

var opts = {
	appClass : (argv.appclass || fileOpts.appClass ),
	configFile : (argv.configfile || fileOpts.configFile),
	dist : (argv.dist || fileOpts.dist),
	hostname : (argv.hostname || fileOpts.hostname),
	port : (argv.port || fileOpts.port)
};

appResolver = appResolver(opts.appClass, opts);

appResolver.host()
	.then(function() {
		console.log(chalk.green('Hosting...\n'));
		console.log(
			chalk.grey( 
				'   app-class: ' + argv.appclass + '\n' +
				'   app-config: ' + appResolver.getConfigUrl() + '\n'
			)
		);
	}).catch(function(err) {
		if (err && err.code === 'EADDRINUSE') {
			console.log(chalk.red('Error: ' + err.code + '. Port is in use.\n'));
		} else {
			console.log(chalk.red('Error: ' + err.code + '.\n'));
		}
	});
